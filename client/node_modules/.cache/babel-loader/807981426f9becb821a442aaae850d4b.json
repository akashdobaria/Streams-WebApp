{"ast":null,"code":"import _classCallCheck from \"/Users/akashdobaria/Desktop/opendatagroup/learning/streams/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/akashdobaria/Desktop/opendatagroup/learning/streams/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/akashdobaria/Desktop/opendatagroup/learning/streams/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/akashdobaria/Desktop/opendatagroup/learning/streams/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/akashdobaria/Desktop/opendatagroup/learning/streams/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/akashdobaria/Desktop/opendatagroup/learning/streams/client/src/components/streams/StreamShow.js\";\nimport React from 'react';\nimport flv from 'flv.js';\nimport { connect } from 'react-redux';\nimport { fetchStream } from '../../actions';\n\nvar StreamShow =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(StreamShow, _React$Component);\n\n  function StreamShow(props) {\n    var _this;\n\n    _classCallCheck(this, StreamShow);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(StreamShow).call(this, props));\n\n    _this.buildPlayer = function () {\n      if (_this.player || !_this.props.stream) {\n        return;\n      }\n\n      var id = _this.props.match.params.id.id;\n\n      _this.player.attachMediaElement(_this.videoRef.current);\n\n      _this.player.load();\n    };\n\n    _this.videoRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(StreamShow, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var id = this.props.match.params.id.id;\n      this.props.fetchStream(id);\n      this.player = flv.createPlayer({\n        type: 'flv',\n        url: \"http://localhost:8000/live/\".concat(id, \".flv\")\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!this.props.stream) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34\n          },\n          __self: this\n        }, \" Loading\");\n      }\n\n      var _this$props$stream = this.props.stream,\n          title = _this$props$stream.title,\n          description = _this$props$stream.description;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(\"video\", {\n        ref: this.videoRef,\n        style: {\n          width: '100%',\n          height: '40%'\n        },\n        controls: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, title), React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, description));\n    }\n  }]);\n\n  return StreamShow;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state, ownProps) {\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream: fetchStream\n})(StreamShow);","map":{"version":3,"sources":["/Users/akashdobaria/Desktop/opendatagroup/learning/streams/client/src/components/streams/StreamShow.js"],"names":["React","flv","connect","fetchStream","StreamShow","props","buildPlayer","player","stream","id","match","params","attachMediaElement","videoRef","current","load","createRef","createPlayer","type","url","title","description","width","height","Component","mapStateToProps","state","ownProps","streams"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,QAA4B,eAA5B;;IAEMC,U;;;;;AACF,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,oFAAMA,KAAN;;AADe,UAenBC,WAfmB,GAeL,YAAM;AAChB,UAAI,MAAKC,MAAL,IAAe,CAAC,MAAKF,KAAL,CAAWG,MAA/B,EAAuC;AACnC;AACH;;AAHe,UAKRC,EALQ,GAKD,MAAKJ,KAAL,CAAWK,KAAX,CAAiBC,MAAjB,CAAwBF,EALvB,CAKRA,EALQ;;AAMhB,YAAKF,MAAL,CAAYK,kBAAZ,CAA+B,MAAKC,QAAL,CAAcC,OAA7C;;AACA,YAAKP,MAAL,CAAYQ,IAAZ;AACH,KAvBkB;;AAEf,UAAKF,QAAL,GAAgBb,KAAK,CAACgB,SAAN,EAAhB;AAFe;AAGlB;;;;wCACmB;AAAA,UACRP,EADQ,GACD,KAAKJ,KAAL,CAAWK,KAAX,CAAiBC,MAAjB,CAAwBF,EADvB,CACRA,EADQ;AAGhB,WAAKJ,KAAL,CAAWF,WAAX,CAAuBM,EAAvB;AAEA,WAAKF,MAAL,GAAcN,GAAG,CAACgB,YAAJ,CAAiB;AAC3BC,QAAAA,IAAI,EAAE,KADqB;AAE3BC,QAAAA,GAAG,uCAAgCV,EAAhC;AAFwB,OAAjB,CAAd;AAIH;;;6BAYQ;AACL,UAAI,CAAC,KAAKJ,KAAL,CAAWG,MAAhB,EAAuB;AACnB,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACH;;AAHI,+BAK0B,KAAKH,KAAL,CAAWG,MALrC;AAAA,UAKGY,KALH,sBAKGA,KALH;AAAA,UAKUC,WALV,sBAKUA,WALV;AAOL,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,GAAG,EAAE,KAAKR,QAAjB;AAA2B,QAAA,KAAK,EAAE;AAACS,UAAAA,KAAK,EAAE,MAAR;AAAgBC,UAAAA,MAAM,EAAE;AAAxB,SAAlC;AAAkE,QAAA,QAAQ,MAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKH,KAAL,CAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKC,WAAL,CAHJ,CADJ;AAOH;;;;EAxCoBrB,KAAK,CAACwB,S;;AA2C/B,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AACzC,SAAO;AAAEnB,IAAAA,MAAM,EAAEkB,KAAK,CAACE,OAAN,CAAcD,QAAQ,CAACjB,KAAT,CAAeC,MAAf,CAAsBF,EAApC;AAAV,GAAP;AACH,CAFD;;AAIA,eAAeP,OAAO,CAACuB,eAAD,EAAkB;AAAEtB,EAAAA,WAAW,EAAXA;AAAF,CAAlB,CAAP,CAA0CC,UAA1C,CAAf","sourcesContent":["import React from 'react';\nimport flv from 'flv.js';\nimport { connect } from 'react-redux';\nimport { fetchStream } from '../../actions';\n\nclass StreamShow extends React.Component {\n    constructor(props) {\n        super(props);\n        this.videoRef = React.createRef();\n    }\n    componentDidMount() {\n        const { id } = this.props.match.params.id;\n\n        this.props.fetchStream(id);\n\n        this.player = flv.createPlayer({\n            type: 'flv',\n            url: `http://localhost:8000/live/${id}.flv`\n        });\n    }\n\n    buildPlayer = () => {\n        if (this.player || !this.props.stream) {\n            return;\n        }\n\n        const { id } = this.props.match.params.id;\n        this.player.attachMediaElement(this.videoRef.current);\n        this.player.load();\n    }\n\n    render() {\n        if (!this.props.stream){\n            return <div> Loading</div>\n        }\n\n        const { title, description } = this.props.stream;\n\n        return ( \n            <div>\n                <video ref={this.videoRef} style={{width: '100%', height: '40%'}} controls />\n                <h1>{title}</h1>\n                <h5>{description}</h5>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return { stream: state.streams[ownProps.match.params.id] }\n}\n\nexport default connect(mapStateToProps, { fetchStream })(StreamShow);"]},"metadata":{},"sourceType":"module"}